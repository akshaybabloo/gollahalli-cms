import datetime
import os
import urllib.request

from django.conf import settings
from django.contrib import sitemaps
from django.contrib.sitemaps.views import x_robots_tag
from django.contrib.sites.shortcuts import get_current_site
from django.http import HttpResponse
from django.template.response import TemplateResponse
from django.urls import reverse


class Sitemap(sitemaps.Sitemap):
    """
    Sitemap object.
    """

    def __init__(self, names, priority, changefreq, lastmod):
        """
        The values should be of list and should have the same length as the `names`.

        Parameters
        ----------
        names: list
            List of url names.
        priority: list
            list of priority values.
        changefreq: list
            list of change frequency.
        lastmod: list
            List datetime objects.
        """
        self.names = names
        self.priority = priority
        self.changefreq = self._changefreq(changefreq)
        self.lastmod = self._lastmod(lastmod)

    def items(self):
        """
        Returns URL.

        Returns
        -------
        name: str
            Returns URL
        """
        return self.names

    def _changefreq(self, obj):
        """
        Frequency of updates.

        Parameters
        ----------
        obj: list
            Change frequencies.

        Returns
        -------
        string: str
            Return change frequency.
        """
        return obj

    def _lastmod(self, obj):
        """
        Returns datetime object.

        Parameters
        ----------
        obj: datetiime
            Datetime format.

        Returns
        -------
        obj: datetime
            Returns datetime.

        """

        return obj

    def location(self, obj):
        """
        Parameters
        ----------
        obj: str
            URL name.

        Returns
        -------
        obj: str
            Returns reverse URL.
        """
        return reverse(obj)

    def _urls(self, page, protocol, domain):
        urls = []
        latest_lastmod = None
        all_items_lastmod = True  # track if all items have a lastmod
        for count, item in enumerate(self.paginator.page(page).object_list):
            loc = "%s://%s%s" % (protocol, domain, self.__get('location', item))
            priority = self.__get('priority', item)
            lastmod = self.__get('lastmod', item)[count]
            if all_items_lastmod:
                all_items_lastmod = lastmod is not None
                if (all_items_lastmod and
                        (latest_lastmod is None or lastmod > latest_lastmod)):
                    latest_lastmod = lastmod

            url_info = {
                'item': item,
                'location': loc,
                'lastmod': lastmod,
                'changefreq': self.__get('changefreq', item)[count],
                'priority': str(priority[count] if priority is not None else ''),
            }
            urls.append(url_info)
        if all_items_lastmod and latest_lastmod:
            self.latest_lastmod = latest_lastmod
        return urls


@x_robots_tag
def index_view(request, sitemaps,
               template_name='sitemap_index.xml', content_type='application/xml',
               sitemap_url_name='django.contrib.sitemaps.views.sitemap'):
    """
    Returns a zipped list of urls and their latest modified date.
    """
    content = {}
    req_protocol = request.scheme
    req_site = get_current_site(request)
    maps = sitemaps.values()

    sites = []  # all sections' sitemap URLs
    lastmod = []
    for section, site in sitemaps.items():
        # For each section label, add links of all pages of its sitemap
        # (usually generated by the `sitemap` view).
        if callable(site):
            site = site()
        protocol = req_protocol if site.protocol is None else site.protocol
        sitemap_url = reverse(sitemap_url_name, kwargs={'section': section})
        absolute_url = '%s://%s%s' % (protocol, req_site.domain, sitemap_url)
        sites.append(absolute_url)
        # Add links to all pages of the sitemap.
        for page in range(2, site.paginator.num_pages + 1):
            sites.append('%s?p=%s' % (absolute_url, page))

    for _site in maps:
        if callable(_site):
            _site = _site()
        if all_sites_lastmod:
            site_lastmod = getattr(_site, 'lastmod', None)
            if len(site_lastmod) > 1:
                lastmod.append(max(site_lastmod))
            else:
                lastmod.append(site_lastmod[0])

    content['sitemaps'] = list(zip(sites, lastmod))

    response = TemplateResponse(request, template_name, content,
                                content_type=content_type)

    return response


def xsl_content_type(request):
    """
    Converts the MIME type of `sitemap.xsl`.

    Returns
    -------
    HttpResponse: HttpResponse
        Returns `sitemap.xsl`.

    """

    if 'DYNO' in os.environ:

        url = os.path.join(settings.STATIC_URL, 'sitemap.xsl')
        user_agent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.7) Gecko/2009021910 Firefox/3.0.7'
        headers = {'User-Agent': user_agent, }

        request = urllib.request.Request(url, None, headers)
        response = urllib.request.urlopen(request)
        data = response.read().decode('UTF-8')
    else:
        data = open(os.path.join(settings.STATIC_ROOT, 'sitemap.xsl')).read()

    return HttpResponse(data, content_type="text/xsl")
